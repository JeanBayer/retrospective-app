generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @map("user_id")
  email    String @unique
  name     String
  password String @map("hashed_password")

  sprintWins Int @default(0) @map("sprint_wins")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships TeamMembership[]

  thankYousGiven    ThankYou[] @relation("GivenThankYous")
  thankYousReceived ThankYou[] @relation("ReceivedThankYous")

  votesGiven    Vote[] @relation("VotesGiven")
  votesReceived Vote[] @relation("VotesReceived")

  passwordResets PasswordReset[]

  sprintWinnerOfRetrospectives Retrospective[] @relation("SprintWinner")

  @@map("users")
}

model Team {
  id           String @id @default(uuid()) @map("team_id")
  name         String @map("team_name")
  joinPassword String @map("hashed_join_password")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  memberships    TeamMembership[]
  retrospectives Retrospective[]
  counters       Counter[]
  timers         Timer[]

  @@map("teams")
}

model TeamMembership {
  id String @id @default(uuid()) @map("membership_id")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  teamId String @map("team_id")
  team   Team   @relation(fields: [teamId], references: [id])

  isAdmin  Boolean  @default(false) @map("is_admin")
  joinedAt DateTime @default(now()) @map("joined_at")

  @@unique([userId, teamId])
  @@map("team_memberships")
}

model Counter {
  id     String @id @default(uuid()) @map("counter_id")
  teamId String @map("team_id")
  team   Team   @relation(fields: [teamId], references: [id])

  name              String
  currentCount      Int    @default(0) @map("current_count")
  longestStreak     Int    @default(0) @map("longest_streak")
  lastResetDuration Int    @default(0) @map("last_reset_duration")

  incrementButtonLabel String @default("Un día más") @map("increment_button_label")
  resetButtonLabel     String @default("¡Evento!") @map("reset_button_label")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  resetRecords           CounterResetRecord[]
  goals                  Goal[]
  CounterIncrementRecord CounterIncrementRecord[]

  @@map("counters")
}

model CounterIncrementRecord {
  id            String   @id @default(uuid()) @map("increment_id")
  counterId     String   @map("counter_id")
  counter       Counter  @relation(fields: [counterId], references: [id], onDelete: Cascade)
  incrementedAt DateTime @map("incremented_at") @db.Date

  @@unique([counterId, incrementedAt])
  @@map("counter_increment_records")
}

model CounterResetRecord {
  id        String  @id @default(uuid()) @map("record_id")
  counterId String  @map("counter_id")
  counter   Counter @relation(fields: [counterId], references: [id], onDelete: Cascade)

  countBeforeReset Int      @map("count_before_reset")
  nameResetEvent   String   @map("name_reset_event")
  resetOccurredAt  DateTime @map("reset_occurred_at") @db.Date

  @@unique([counterId, resetOccurredAt])
  @@map("counter_reset_records")
}

model Goal {
  id          String    @id @default(uuid()) @map("goal_id")
  description String
  targetDays  Int       @map("target_days")
  achieved    Boolean   @default(false)
  achievedAt  DateTime? @map("achieved_at")

  counterId String  @map("counter_id")
  counter   Counter @relation(fields: [counterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("goals")
}

enum RetrospectiveStatus {
  CREATED
  CLOSED
}

model Retrospective {
  id     String @id @default(uuid()) @map("retrospective_id")
  teamId String @map("team_id")
  team   Team   @relation(fields: [teamId], references: [id])

  retrospectiveName   String @map("retrospective_name")
  retrospectiveNumber Int    @map("retrospective_number")

  createdAt DateTime @default(now()) @map("created_at")

  votes Vote[]

  sprintWinnerId String? @map("sprint_winner_id")
  sprintWinner   User?   @relation("SprintWinner", fields: [sprintWinnerId], references: [id])

  status RetrospectiveStatus @default(CREATED) @map("status")

  thankYous ThankYou[]

  @@unique([teamId, retrospectiveNumber])
  @@map("retrospectives")
}

model Vote {
  id String @id @default(uuid()) @map("vote_id")

  voterId String @map("voter_id")
  voter   User   @relation("VotesGiven", fields: [voterId], references: [id])

  retrospectiveId String        @map("retrospective_id")
  retrospective   Retrospective @relation(fields: [retrospectiveId], references: [id])

  votedForId String @map("voted_for_id")
  votedFor   User   @relation("VotesReceived", fields: [votedForId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([voterId, retrospectiveId])
  @@map("votes")
}

model ThankYou {
  id      String @id @default(uuid()) @map("thank_you_id")
  message String @db.Text

  giverId String @map("giver_id")
  giver   User   @relation("GivenThankYous", fields: [giverId], references: [id])

  receiverId String? @map("receiver_id")
  receiver   User?   @relation("ReceivedThankYous", fields: [receiverId], references: [id])

  retrospectiveId String        @map("retrospective_id")
  retrospective   Retrospective @relation(fields: [retrospectiveId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("thank_yous")
}

model PasswordReset {
  id        String   @id @default(uuid())
  code      String   @map("hashed_code")
  expiresAt DateTime @map("expires_at")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model Timer {
  id        String   @id @default(uuid()) @map("timer_id")
  teamId    String   @unique @map("team_id")
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  duration  Int      @map("duration_minutes")
  endsAt    DateTime @map("ends_at")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("timers")
}
